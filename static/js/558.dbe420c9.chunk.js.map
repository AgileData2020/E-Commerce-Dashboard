{"version":3,"file":"static/js/558.dbe420c9.chunk.js","mappings":"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","sources":["inventory/inventory.js","../node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/@babel/runtime/helpers/esm/superPropBase.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport DataGrid, { Column, Toolbar, Item, FilterRow, SearchPanel, Editing, } from 'devextreme-react/data-grid';\nimport { FlexboxGrid } from 'rsuite';\nimport { Panel } from 'rsuite';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateInventory } from '../redux/slices/inventory';\nconst Inventory = () => {\n    const inventoryData = useSelector(state => state?.inventory?.inventoryData);\n    const gridRef = useRef(null);\n\n    const dispatch = useDispatch();\n\n\n\n    const deepCopyData = JSON.parse(JSON.stringify(inventoryData));;\n\n\n    console.log(deepCopyData, 'deepCopyData')\n\n    const handleRowUpdated = (e) => {\n        // e.data contains the updated row data\n        console.log('Row updated:', e.data);\n        const index = deepCopyData.findIndex(item => item.id === e.data.id);\n\n        if (index !== -1) {\n            let updateRecord = deepCopyData[index] = { ...deepCopyData[index], ...e.data };\n\n            console.log(deepCopyData, 'deepCopy after')\n\n            dispatch(updateInventory(deepCopyData))\n            return true; // Object updated successfully\n        }\n\n        return false; // Object with the specified id not found\n    };\n\n\n\n\n    // You can call your custom function or perform any other action here\n    // For example, you might want to make an API call to save the changes to the server.\n\n\n    const handleRowInserted = (e) => {\n        // Perform actions specific to the insertion of a new row here\n        deepCopyData.push(e.data)\n        dispatch(updateInventory(deepCopyData))\n\n    };\n\n    return (\n        <FlexboxGrid justify=\"space-around\" style={{ marginTop: '20px' }}>\n\n            <FlexboxGrid.Item colspan={24} md={6}>\n                <Panel header={'Products'} shaded>\n\n                    <DataGrid\n                        dataSource={deepCopyData.reverse()}\n                        showBorders={true}\n                        showColumnLines={true}\n                        showRowLines={true}\n                        ref={gridRef}\n                        keyExpr=\"id\"\n                        height={500}\n                        onRowUpdated={handleRowUpdated}\n                        onRowInserted={handleRowInserted}\n\n\n                    >\n                        <FilterRow visible={true} />\n                        <SearchPanel visible={true} />\n                        <Editing\n                            mode=\"cell\"\n                            allowUpdating={true}\n                            allowAdding={true}\n                        />\n\n                        <Column dataField=\"id\" caption=\"ID\" />\n                        <Column dataField=\"name\" caption=\"Product Name\" />\n                        <Column dataField=\"inventory\" caption=\"Stock Level\" title={'if stock level less than 1000 then color change for Low inventory alerts'} cellRender={(data) => {\n\n                            return <span className={data.value < 1000 ? 'stockLevel' : ''}>{data.value}</span>;\n\n                        }} />\n                        <Column dataField=\"date\" caption=\"Created Date\" dataType=\"date\" />\n                        <Column dataField=\"category\" caption=\"Category\" />\n                        <Column dataField=\"price\" caption=\"Price\" format=\"currency\" />\n                        <Column dataField=\"description\" caption=\"Description\" />\n                        <Toolbar>\n                            <Item name=\"addRowButton\" showText=\"always\" />\n\n                        </Toolbar>\n\n                    </DataGrid>\n                </Panel>\n            </FlexboxGrid.Item>\n        </FlexboxGrid >\n    );\n}\n\nexport default Inventory;\n","import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}"],"names":["inventoryData","useSelector","state","_state$inventory","inventory","gridRef","useRef","dispatch","useDispatch","deepCopyData","JSON","parse","stringify","console","log","_jsx","FlexboxGrid","justify","style","marginTop","children","Item","colspan","md","Panel","header","shaded","_jsxs","DataGrid","dataSource","reverse","showBorders","showColumnLines","showRowLines","ref","keyExpr","height","onRowUpdated","e","data","index","findIndex","item","id","_objectSpread","updateInventory","onRowInserted","push","FilterRow","visible","SearchPanel","Editing","mode","allowUpdating","allowAdding","Column","dataField","caption","title","cellRender","className","value","dataType","format","Toolbar","name","showText","_get","Reflect","get","bind","target","property","receiver","base","object","Object","prototype","hasOwnProperty","call","getPrototypeOf","desc","getOwnPropertyDescriptor","arguments","length","apply","this"],"sourceRoot":""}