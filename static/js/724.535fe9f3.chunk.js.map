{"version":3,"file":"static/js/724.535fe9f3.chunk.js","mappings":"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","sources":["component/salestatuschart.js","component/chartStraming.js","helper.js","../node_modules/rsuite/esm/Divider/Divider.js","../node_modules/rsuite/esm/Divider/index.js","revenue/renenue.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Panel } from 'rsuite';\nimport ReactApexChart from 'react-apexcharts';\nimport { useSelector } from 'react-redux';\nimport { SelectPicker } from 'rsuite';\nconst Salestatuschart = () => {\n\n    let revenueArray = [];\n    let categories = [];\n\n    const [category, setCategory] = useState(null);\n    const inventoryData = useSelector(state => state?.inventory?.inventoryData);\n\n    const filterDatabyCate = inventoryData.filter((item) => {\n        if (category) {\n            return item.category === category\n        } else {\n            return item\n        }\n    })\n    filterDatabyCate.forEach(element => {\n        revenueArray.push(element.revenue);\n        categories.push(element.category)\n    });\n    const options = {\n        chart: {\n            type: 'bar',\n        },\n\n        xaxis: {\n            categories: categories,\n        },\n        title: {\n            text: 'Revenue data filterable by product categories',\n            align: 'left'\n        },\n        colors: ['#2d64aa'],\n        dataLabels: {\n            style: {\n                fontSize: '11px',\n                fontWeight: 'bold'\n            },\n            enabled: true,\n            dropShadow: {\n                enabled: true,\n                left: 2,\n                top: 2,\n                opacity: 0.5\n            }\n        },\n        yaxis: [\n            {\n                axisTicks: {\n                    show: true,\n                },\n                axisBorder: {\n                    show: true,\n                    color: 'black'\n                },\n                labels: {\n                    style: {\n                        colors: 'black',\n                    }\n                },\n                title: {\n                    text: 'Revenue',\n                    style: {\n                        color: 'black',\n                        fontWeight: 'bold',\n                        fontSize: '15px'\n                    }\n                },\n                tooltip: {\n                    enabled: true\n                }\n            },\n\n\n        ],\n\n\n\n    };\n\n    const series = [{\n        data: revenueArray\n    }];\n\n\n    const selectOption = categories?.map(\n        item => ({ label: item, value: item })\n    );\n\n    useEffect(() => {\n\n    }, [category])\n\n    return (\n\n\n        <Panel shaded>\n            <SelectPicker onChange={(e) => setCategory(e)} data={selectOption} style={{ width: 224 }} />\n            <ReactApexChart options={options} series={series} type=\"bar\" height={315} />\n        </Panel>\n\n\n\n\n\n\n\n    );\n}\n\nexport default Salestatuschart;\n","import React, { useState, useEffect } from 'react';\nimport ReactApexChart from 'react-apexcharts';\nimport { FlexboxGrid, Panel } from 'rsuite';\nimport HelperClass from '../helper';\nimport Salestatuschart from './salestatuschart';\nconst ChartStraming = ({ seriesData, title, colors, revenueFlag, }) => {\n\n\n    const options = {\n        chart: {\n            height: 350,\n            type: 'line',\n\n            toolbar: {\n                show: false\n            }\n        },\n        colors: colors,\n        stroke: {\n            show: true,\n            // curve: 'smooth',\n            // colors: undefined,\n            width: 3,\n            dashArray: 0,\n        },\n        markers: {\n            shape: \"circle\",\n            size: 5\n        },\n        title: {\n            text: title,\n            align: 'left'\n        },\n\n\n        xaxis: {\n            categories: seriesData?.categories,\n            title: {\n                text: 'Time'\n            }\n        },\n        yaxis: {\n            title: {\n                text: !revenueFlag ? 'Sales' : \"Order , Revenue , Inventory\"\n            },\n            axisTicks: {\n                show: true,\n            },\n            axisBorder: {\n                show: true,\n                color: 'black'\n            },\n\n        },\n\n    };\n    let series = [];\n\n    revenueFlag ?\n        series = [\n            {\n                name: \"Orders\",\n                data: seriesData?.orderArray\n            },\n            {\n                name: \"Inventory\",\n                data: seriesData?.inventoryArray\n            },\n            {\n                name: \"Revenue\",\n                data: seriesData?.revenueArray\n            }\n        ]\n        :\n        series = [\n            {\n                name: \"Offline Sales\",\n                data: seriesData?.offLineSeries\n            },\n            {\n                name: \"Online Sales\",\n                data: seriesData?.onLineSeries\n            }\n        ]\n\n\n\n    const pieSeries = HelperClass?.bestSalesProducts().sales;\n    const pieOption = {\n        chart: {\n            type: 'donut',\n        },\n        labels: HelperClass?.bestSalesProducts()?.products,\n        title: {\n            text: 'Best Selling Products',\n            align: 'left'\n        },\n        dataLabels: {\n            enabled: true, // Ensure that labels are enabled\n        },\n\n\n        responsive: [{\n            breakpoint: 480,\n            options: {\n                chart: {\n                    width: 200\n                },\n\n                legend: {\n                    position: 'top'\n                }\n            }\n        }]\n    };\n    return (\n        <FlexboxGrid justify=\"space-around\" style={{ marginTop: '20px' }}>\n\n            <FlexboxGrid.Item colspan={16} md={6}>\n                <Panel shaded>\n\n                    <ReactApexChart options={options} series={series} type=\"line\" height={350} />\n\n\n                </Panel>\n            </FlexboxGrid.Item>\n\n\n            <FlexboxGrid.Item colspan={8} md={6}>\n                {\n                    !revenueFlag ?\n                        <Panel shaded>\n                            <ReactApexChart options={pieOption} series={pieSeries} type=\"donut\" height={360} />\n                        </Panel> :\n                        <Salestatuschart />\n                }\n            </FlexboxGrid.Item>\n\n\n\n        </FlexboxGrid>\n\n    );\n};\n\nexport default ChartStraming;\n","// staticClass.js\nimport { Schema } from \"rsuite\";\nimport { salesTypesData, bestSallingProducts } from \"./testData\";\nconst HelperClass = {\n    // Define your static functions as properties\n    loginSchema: () => {\n        return Schema.Model({\n            username: Schema.Types.StringType().isRequired('This field is required.'),\n            password: Schema.Types.StringType().minLength(6, \"Can't be less than 6 characters\")\n                .maxLength(30, 'Cannot be greater than 30 characters')\n                .isRequired('This field required')\n        });\n    },\n    salesTypes: () => {\n        let offLineSale = [];\n        let onLineSale = [];\n        let salesTime = [];\n        salesTypesData.forEach((item) => {\n            offLineSale.push(item.OnlineSales);\n            onLineSale.push(item.OfflineSales)\n            salesTime.push(item.Month)\n        })\n\n        return {\n            offLineSale,\n            onLineSale,\n            salesTime\n        }\n    },\n\n    bestSalesProducts: () => {\n        let products = [];\n        let sales = [];\n\n        bestSallingProducts.forEach((item) => {\n            products.push(item.Product);\n            sales.push(item.Sales)\n\n        })\n\n        return {\n            products,\n            sales\n        }\n    },\n\n    generateFakeOrders: (count) => {\n        const orders = [];\n        const orderStatuses = ['Pending', 'Processing', 'Shipped', 'Delivered', 'Cancelled'];\n\n        for (let i = 1; i <= count; i++) {\n            const order = {\n                OrderID: i,\n                CustomerName: `Customer ${i}`,\n                OrderDate: new Date(2023, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28)),\n                ShipCity: `City ${Math.floor(Math.random() * 10)}`,\n                Total: Math.floor(Math.random() * 1000) + 100,\n                OrderStatus: orderStatuses[Math.floor(Math.random() * orderStatuses.length)], // Random order status\n            };\n            orders.push(order);\n        }\n        return orders;\n    },\n\n    timeAggregation: (data, type) => {\n\n\n\n        if (type === 'y') {\n\n            const aggregatedDataYearly = data.reduce((result, item) => {\n                const timestamp = new Date(item.date);\n                const yearKey = timestamp.getFullYear().toString();\n\n                if (!result[yearKey]) {\n                    result[yearKey] = {\n                        revenue: 0,\n                        inventory: 0,\n                        orders: 0,\n                    };\n                }\n\n                result[yearKey].revenue += item.revenue;\n                result[yearKey].inventory += item.inventory;\n                result[yearKey].orders += item.orders;\n\n                return result;\n            }, {});\n\n            return aggregatedDataYearly;\n        } else if (type === 'w') {\n\n            const aggregatedDataWeekly = data.reduce((result, item) => {\n                const timestamp = new Date(item.date);\n                const weekOfYear = getWeekOfYear(timestamp);\n\n                console.log(weekOfYear, 'weekOfYear')\n                if (!result[weekOfYear]) {\n                    result[weekOfYear] = {\n                        revenue: 0,\n                        inventory: 0,\n                        orders: 0,\n                    };\n                }\n\n                result[weekOfYear].revenue += item.revenue;\n                result[weekOfYear].inventory += item.inventory;\n                result[weekOfYear].orders += item.orders;\n\n                return result;\n            }, {});\n\n            // Helper function to calculate the week of the year\n            function getWeekOfYear(date) {\n                const startOfYear = new Date(date.getFullYear(), 0, 1);\n                const days = Math.floor((date - startOfYear) / (24 * 60 * 60 * 1000));\n                return Math.ceil((days + startOfYear.getDay() + 1) / 7);\n            }\n            return aggregatedDataWeekly\n        } else if (type === 'm') {\n            const aggregatedDataMonthly = data.reduce((result, item) => {\n                const timestamp = new Date(item.date);\n                const yearMonthKey = `${timestamp.getFullYear()}-${(timestamp.getMonth() + 1)\n                    .toString()\n                    .padStart(2, '0')}`;\n\n                if (!result[yearMonthKey]) {\n                    result[yearMonthKey] = {\n                        revenue: 0,\n                        inventory: 0,\n                        orders: 0,\n                    };\n                }\n\n                result[yearMonthKey].revenue += item.revenue;\n                result[yearMonthKey].inventory += item.inventory;\n                result[yearMonthKey].orders += item.orders;\n\n                return result;\n            }, {});\n\n\n\n            return aggregatedDataMonthly;\n        }\n\n\n    }\n\n\n\n\n};\n\n// Export the object\nexport default HelperClass;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useClassNames } from '../utils';\nvar Divider = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n      Component = _props$as === void 0 ? 'div' : _props$as,\n      className = props.className,\n      _props$classPrefix = props.classPrefix,\n      classPrefix = _props$classPrefix === void 0 ? 'divider' : _props$classPrefix,\n      children = props.children,\n      vertical = props.vertical,\n      rest = _objectWithoutPropertiesLoose(props, [\"as\", \"className\", \"classPrefix\", \"children\", \"vertical\"]);\n\n  var _useClassNames = useClassNames(classPrefix),\n      prefix = _useClassNames.prefix,\n      withClassPrefix = _useClassNames.withClassPrefix,\n      merge = _useClassNames.merge;\n\n  var classes = merge(className, withClassPrefix(vertical ? 'vertical' : 'horizontal', {\n    'with-text': children\n  }));\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    role: \"separator\"\n  }, rest, {\n    ref: ref,\n    className: classes,\n    \"aria-orientation\": vertical ? 'vertical' : 'horizontal'\n  }), children && /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix('inner-text')\n  }, children));\n});\nDivider.displayName = 'Divider';\nDivider.propTypes = {\n  as: PropTypes.elementType,\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  children: PropTypes.node,\n  vertical: PropTypes.bool\n};\nexport default Divider;","import Divider from './Divider';\nexport default Divider;","import React, { useState, useEffect } from 'react';\nimport ChartStraming from '../component/chartStraming';\nimport HelperClass from '../helper';\nimport { Stack, Button, Divider } from 'rsuite';\nimport { useSelector } from 'react-redux';\n\nconst Renenue = () => {\n\n    const inventoryData = useSelector(state => state?.inventory?.inventoryData);\n\n    const [aggregationType, setAggrigationType] = useState('d');\n\n\n\n\n    useEffect(() => {\n\n    }, [aggregationType])\n\n\n\n    let revenueArray = [];\n    let inventoryArray = [];\n    let orderArray = [];\n    let categories = [];\n\n    // data is already in days therefore no need to convert in days\n\n    if (aggregationType === 'd') {\n\n        inventoryData.forEach(element => {\n            revenueArray.push(element.revenue);\n            inventoryArray.push(element.inventory);\n            orderArray.push(element.orders);\n            categories.push(element.date)\n        });\n\n    } else {\n        let resultData = HelperClass.timeAggregation(inventoryData, aggregationType);\n        for (var key in resultData) {\n\n            revenueArray.push(resultData[key].revenue);\n            inventoryArray.push(resultData[key].inventory)\n            orderArray.push(resultData[key].orders)\n            categories.push(key)\n        }\n    }\n\n    //  object for pass as props to ChartStraming component\n\n    let seriesOption = {\n        revenueArray,\n        inventoryArray,\n        orderArray,\n        categories\n    }\n\n    return (\n        <>\n            <Stack divider={<Divider vertical />}>\n                <Button onClick={() => setAggrigationType('d')}>Daily</Button>\n                <Button onClick={() => setAggrigationType('w')}>Weekly</Button>\n                <Button onClick={() => setAggrigationType('m')}> Month</Button>\n                <Button onClick={() => setAggrigationType('y')}>Year</Button>\n            </Stack>\n            <ChartStraming revenueFlag={true} seriesData={seriesOption} title={'Orders and Sales, Inventory Trends Over Time'} colors={['#77B6EA', '#f44336', '#ffb300']} />\n        </>\n    );\n}\n\nexport default Renenue;\n"],"names":["revenueArray","categories","_useState","useState","_useState2","_slicedToArray","category","setCategory","useSelector","state","_state$inventory","inventory","inventoryData","filter","item","forEach","element","push","revenue","options","chart","type","xaxis","title","text","align","colors","dataLabels","style","fontSize","fontWeight","enabled","dropShadow","left","top","opacity","yaxis","axisTicks","show","axisBorder","color","labels","tooltip","series","data","selectOption","map","label","value","useEffect","_jsxs","Panel","shaded","children","_jsx","SelectPicker","onChange","e","width","ReactApexChart","height","_ref","_HelperClass$bestSale","seriesData","revenueFlag","toolbar","stroke","dashArray","markers","shape","size","name","orderArray","inventoryArray","offLineSeries","onLineSeries","pieSeries","HelperClass","bestSalesProducts","sales","pieOption","products","responsive","breakpoint","legend","position","FlexboxGrid","justify","marginTop","Item","colspan","md","Salestatuschart","loginSchema","Schema","Model","username","Types","StringType","isRequired","password","minLength","maxLength","salesTypes","offLineSale","onLineSale","salesTime","salesTypesData","OnlineSales","OfflineSales","Month","bestSallingProducts","Product","Sales","generateFakeOrders","count","orders","orderStatuses","i","order","OrderID","CustomerName","concat","OrderDate","Date","Math","floor","random","ShipCity","Total","OrderStatus","length","timeAggregation","reduce","result","yearKey","date","getFullYear","toString","weekOfYear","startOfYear","days","ceil","getDay","getWeekOfYear","console","log","timestamp","yearMonthKey","getMonth","padStart","Divider","React","props","ref","_props$as","as","Component","className","_props$classPrefix","classPrefix","vertical","rest","_objectWithoutPropertiesLoose","_useClassNames","useClassNames","prefix","withClassPrefix","classes","merge","_extends","role","displayName","propTypes","PropTypes","aggregationType","setAggrigationType","resultData","key","seriesOption","_Fragment","Stack","divider","Button","onClick","ChartStraming"],"sourceRoot":""}