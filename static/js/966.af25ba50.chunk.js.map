{"version":3,"file":"static/js/966.af25ba50.chunk.js","mappings":"0YA+HA,EA1GmB,WAEf,IAAAA,GAAgCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAC5BI,GAAgCL,EAAAA,EAAAA,UAAS,MAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAvCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACtBG,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,MAEhBC,EAAAA,EAAAA,kBAAgB,WACRC,aAAaC,QAAQ,UACrBN,EAAS,aAEjB,IAuBA,OACIO,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UAEIF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,WAAUD,UAErBF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,iBAAgBD,UAC3BE,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CAAAH,SAAA,EACRF,EAAAA,EAAAA,KAACK,EAAAA,EAAYC,KAAI,CAACH,UAAU,OAAOI,QAAS,GAAGL,UAC3CE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,WAAUD,SAAA,EACrBF,EAAAA,EAAAA,KAAA,OAAKQ,IAAKC,EAAOC,IAAI,UACrBV,EAAAA,EAAAA,KAACK,EAAAA,EAAW,CAACM,MAAO,CAAEC,WAAY,QAASV,UACvCF,EAAAA,EAAAA,KAACK,EAAAA,EAAYC,KAAI,CAACH,UAAU,OAAOI,QAAS,GAAGL,UAC3CF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,gBAAgBQ,MAAO,CAAEE,MAAO,QAASC,UAAW,OAAQC,UAAW,UAAWb,SAAC,iCAOlHF,EAAAA,EAAAA,KAACK,EAAAA,EAAYC,KAAI,CAACH,UAAU,QAAQI,QAAS,GAAGL,UAE5CE,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CAACW,QAAQ,SAAQd,SAAA,EAEzBF,EAAAA,EAAAA,KAACK,EAAAA,EAAYC,KAAI,CAACH,UAAU,mBAAmBI,QAAS,GAAGL,UAEvDF,EAAAA,EAAAA,KAAA,MAAIW,MAAO,CAAEE,MAAO,WAAYX,SAAC,mBAErCF,EAAAA,EAAAA,KAACK,EAAAA,EAAYC,KAAI,CAACH,UAAU,OAAOI,QAAS,MAI5CP,EAAAA,EAAAA,KAACK,EAAAA,EAAYC,KAAI,CAACH,UAAU,OAAOI,QAAS,MAE5CP,EAAAA,EAAAA,KAACK,EAAAA,EAAW,CAAAH,UACRF,EAAAA,EAAAA,KAACK,EAAAA,EAAYC,KAAI,CAAAJ,UACbE,EAAAA,EAAAA,MAACa,EAAAA,EAAI,CAACC,MAAOC,EAAAA,EAAYC,cAAeC,SAAU,SAACC,GAAmBA,GArD5E,SAAbnC,GAAoC,aAAbI,GAGhCO,aAAayB,QAAQ,QAASC,KAAKC,UACnChC,EAAS,cACTE,EAAQ+B,MAAK1B,EAAAA,EAAAA,KAAC2B,EAAAA,EAAO,CAACC,UAAQ,EAACC,KAAM,UAAWC,UAAQ,EAAA5B,SAAC,4BAE7C,CAAE6B,UAAW,SAAUC,SAAU,OAK7CrC,EAAQ+B,MAAK1B,EAAAA,EAAAA,KAAC2B,EAAAA,EAAO,CAACC,UAAQ,EAACC,KAAM,QAASC,UAAQ,EAAA5B,SAAC,sBAE3C,CAAE6B,UAAW,SAAUC,SAAU,KAuCuD,EAAC9B,SAAA,EACrEF,EAAAA,EAAAA,KAACiB,EAAAA,EAAKgB,MAAK,CAAA/B,UACPF,EAAAA,EAAAA,KAACiB,EAAAA,EAAKiB,QAAO,CAACC,KAAM,WAAYC,SAAU,SAACd,GAAC,OAAKlC,EAAYkC,EAAE,EAAEnB,UAAU,SAASkC,YAAY,iBAEpGrC,EAAAA,EAAAA,KAACiB,EAAAA,EAAKgB,MAAK,CAAA/B,UAEPF,EAAAA,EAAAA,KAACiB,EAAAA,EAAKiB,QAAO,CAAC/B,UAAU,SAASiC,SAAU,SAACd,GAAC,OAAK9B,EAAY8B,EAAE,EAAEa,KAAK,WAAWN,KAAK,WAAWS,aAAa,MAAMD,YAAY,gBAErIjC,EAAAA,EAAAA,MAACa,EAAAA,EAAKgB,MAAK,CAAA/B,SAAA,EAEPF,EAAAA,EAAAA,KAACuC,EAAAA,EAAa,CAACV,KAAK,SAAQ3B,UACxBF,EAAAA,EAAAA,KAACwC,EAAAA,EAAU,CAACX,KAAK,SAAS1B,UAAU,wCAAwCsC,MAAMzC,EAAAA,EAAAA,KAAC0C,EAAAA,GAAmB,IAAKC,QAAM,OAGrH3C,EAAAA,EAAAA,KAACK,EAAAA,EAAW,CAACF,UAAU,YAAWD,UAC9BE,EAAAA,EAAAA,MAACC,EAAAA,EAAYC,KAAI,CAACH,UAAU,mBAAmBI,QAAS,GAAGL,SAAA,CAAC,kCAC/BF,EAAAA,EAAAA,KAAC4C,EAAAA,EAAM,CAACzC,UAAU,gBAAgB0C,WAAW,OAAOlC,MAAO,CAAEmC,eAAgB,QAAS5C,SAAC,yCAmBxK,C,iDC1HMiB,EAAc,CAEhBC,YAAa,WACT,OAAO2B,EAAAA,EAAOC,MAAM,CAChBC,SAAUF,EAAAA,EAAOG,MAAMC,aAAaC,WAAW,2BAC/C7D,SAAUwD,EAAAA,EAAOG,MAAMC,aAAaE,UAAU,EAAG,mCAC5CC,UAAU,GAAI,wCACdF,WAAW,wBAExB,EACAG,WAAY,WACR,IAAIC,EAAc,GACdC,EAAa,GACbC,EAAY,GAOhB,OANAC,EAAAA,GAAeC,SAAQ,SAACC,GACpBL,EAAY9B,KAAKmC,EAAKC,aACtBL,EAAW/B,KAAKmC,EAAKE,cACrBL,EAAUhC,KAAKmC,EAAKG,MACxB,IAEO,CACHR,YAAAA,EACAC,WAAAA,EACAC,UAAAA,EAER,EAEAO,kBAAmB,WACf,IAAIC,EAAW,GACXC,EAAQ,GAQZ,OANAC,EAAAA,GAAoBR,SAAQ,SAACC,GACzBK,EAASxC,KAAKmC,EAAKQ,SACnBF,EAAMzC,KAAKmC,EAAKS,MAEpB,IAEO,CACHJ,SAAAA,EACAC,MAAAA,EAER,EAEAI,mBAAoB,SAACC,GAIjB,IAHA,IAAMC,EAAS,GACTC,EAAgB,CAAC,UAAW,aAAc,UAAW,YAAa,aAE/DC,EAAI,EAAGA,GAAKH,EAAOG,IAAK,CAC7B,IAAMC,EAAQ,CACVC,QAASF,EACTG,aAAa,YAADC,OAAcJ,GAC1BK,UAAW,IAAIC,KAAK,KAAMzD,KAAK0D,MAAsB,GAAhB1D,KAAKC,UAAgBD,KAAK0D,MAAsB,GAAhB1D,KAAKC,WAC1E0D,SAAS,QAADJ,OAAUvD,KAAK0D,MAAsB,GAAhB1D,KAAKC,WAClC2D,MAAO5D,KAAK0D,MAAsB,IAAhB1D,KAAKC,UAAmB,IAC1C4D,YAAaX,EAAclD,KAAK0D,MAAM1D,KAAKC,SAAWiD,EAAcY,UAExEb,EAAO/C,KAAKkD,EAChB,CACA,OAAOH,CACX,EAEAc,gBAAiB,SAACC,EAAM3D,GAIpB,GAAa,MAATA,EAqBA,OAnB6B2D,EAAKC,QAAO,SAACC,EAAQ7B,GAC9C,IACM8B,EADY,IAAIV,KAAKpB,EAAK+B,MACNC,cAAcC,WAcxC,OAZKJ,EAAOC,KACRD,EAAOC,GAAW,CACdI,QAAS,EACTC,UAAW,EACXvB,OAAQ,IAIhBiB,EAAOC,GAASI,SAAWlC,EAAKkC,QAChCL,EAAOC,GAASK,WAAanC,EAAKmC,UAClCN,EAAOC,GAASlB,QAAUZ,EAAKY,OAExBiB,CACX,GAAG,CAAC,GAGD,GAAa,MAAT7D,EAAc,CA4BrB,OA1B6B2D,EAAKC,QAAO,SAACC,EAAQ7B,GAC9C,IACMoC,EAmBV,SAAuBL,GACnB,IAAMM,EAAc,IAAIjB,KAAKW,EAAKC,cAAe,EAAG,GAC9CM,EAAO3E,KAAK0D,OAAOU,EAAOM,GAAW,OAC3C,OAAO1E,KAAK4E,MAAMD,EAAOD,EAAYG,SAAW,GAAK,EACzD,CAvBuBC,CADD,IAAIrB,KAAKpB,EAAK+B,OAgBhC,OAbAW,QAAQC,IAAIP,EAAY,cACnBP,EAAOO,KACRP,EAAOO,GAAc,CACjBF,QAAS,EACTC,UAAW,EACXvB,OAAQ,IAIhBiB,EAAOO,GAAYF,SAAWlC,EAAKkC,QACnCL,EAAOO,GAAYD,WAAanC,EAAKmC,UACrCN,EAAOO,GAAYxB,QAAUZ,EAAKY,OAE3BiB,CACX,GAAG,CAAC,EASR,CAAO,MAAa,MAAT7D,EACuB2D,EAAKC,QAAO,SAACC,EAAQ7B,GAC/C,IAAM4C,EAAY,IAAIxB,KAAKpB,EAAK+B,MAC1Bc,EAAY,GAAA3B,OAAM0B,EAAUZ,cAAa,KAAAd,QAAK0B,EAAUE,WAAa,GACtEb,WACAc,SAAS,EAAG,MAcjB,OAZKlB,EAAOgB,KACRhB,EAAOgB,GAAgB,CACnBX,QAAS,EACTC,UAAW,EACXvB,OAAQ,IAIhBiB,EAAOgB,GAAcX,SAAWlC,EAAKkC,QACrCL,EAAOgB,GAAcV,WAAanC,EAAKmC,UACvCN,EAAOgB,GAAcjC,QAAUZ,EAAKY,OAE7BiB,CACX,GAAG,CAAC,QApBD,CA4BX,GAQJ,K","sources":["auth/login/index.js","helper.js"],"sourcesContent":["import React, { useEffect, useState, useLayoutEffect } from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport BgImg from './images/bgimg.png'\r\nimport {\r\n\r\n    Form,\r\n    ButtonToolbar,\r\n    Button,\r\n    Message,\r\n    FlexboxGrid,\r\n    IconButton,\r\n    useToaster\r\n\r\n} from 'rsuite';\r\nimport './style.css'\r\n\r\nimport { TiArrowRightOutline } from 'react-icons/ti';\r\nimport HelperClass from '../../helper';\r\nimport { loginUser } from '../../redux/slices/auth/login';\r\n\r\nconst Containerr = () => {\r\n\r\n    const [userName, setUserName] = useState(null);\r\n    const [password, setPassword] = useState(null);\r\n    const navigate = useNavigate();\r\n    const toaster = useToaster();\r\n\r\n    useLayoutEffect(() => {\r\n        if (localStorage.getItem('token')) {\r\n            navigate('/dashboard');\r\n        }\r\n    })\r\n\r\n    const handleSubmit = (event) => {\r\n        // Handle the form submission here\r\n\r\n        if (event && userName === 'amir' && password === 'task@123') {\r\n\r\n            let payload = { 'username': userName, 'password': password }\r\n            localStorage.setItem('token', Math.random())\r\n            navigate('/dashboard');\r\n            toaster.push(<Message showIcon type={'success'} closable>\r\n                User login successfully\r\n            </Message>, { placement: 'topEnd', duration: 5000 })\r\n\r\n\r\n\r\n        } else {\r\n            toaster.push(<Message showIcon type={'error'} closable>\r\n                Wrong Credentials\r\n            </Message>, { placement: 'topEnd', duration: 5000 })\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className='main_div'>\r\n\r\n                <div className=\"show-grid-auth\">\r\n                    <FlexboxGrid >\r\n                        <FlexboxGrid.Item className=\"item\" colspan={12}>\r\n                            <div className=\"the_page\">\r\n                                <img src={BgImg} alt=\"logo\" />\r\n                                <FlexboxGrid style={{ marginLeft: '15px' }}>\r\n                                    <FlexboxGrid.Item className=\"item\" colspan={20}>\r\n                                        <div className='login-headign' style={{ color: 'white', marginTop: '20px', textAlign: 'center' }}>Welcome Fake Store</div>\r\n                                    </FlexboxGrid.Item>\r\n\r\n                                </FlexboxGrid>\r\n                            </div>\r\n                        </FlexboxGrid.Item>\r\n\r\n                        <FlexboxGrid.Item className='pd-13' colspan={12} >\r\n\r\n                            <FlexboxGrid justify='center'>\r\n\r\n                                <FlexboxGrid.Item className=\"item text-center\" colspan={20}>\r\n\r\n                                    <h1 style={{ color: '#1b32d5' }}> Fake Store</h1>\r\n                                </FlexboxGrid.Item>\r\n                                <FlexboxGrid.Item className=\"item\" colspan={20}>\r\n\r\n\r\n                                </FlexboxGrid.Item>\r\n                                <FlexboxGrid.Item className=\"item\" colspan={20}>\r\n                                </FlexboxGrid.Item>\r\n                                <FlexboxGrid>\r\n                                    <FlexboxGrid.Item >\r\n                                        <Form model={HelperClass.loginSchema()} onSubmit={(e) => handleSubmit(e)}>\r\n                                            <Form.Group>\r\n                                                <Form.Control name={'username'} onChange={(e) => setUserName(e)} className='input1' placeholder='User name' />\r\n                                            </Form.Group>\r\n                                            <Form.Group>\r\n\r\n                                                <Form.Control className='input1' onChange={(e) => setPassword(e)} name=\"password\" type=\"password\" autoComplete=\"off\" placeholder='Password' />\r\n                                            </Form.Group>\r\n                                            <Form.Group>\r\n\r\n                                                <ButtonToolbar type=\"submit\">\r\n                                                    <IconButton type=\"submit\" className='submit_button text-center margin-auto' icon={<TiArrowRightOutline />} circle />\r\n                                                </ButtonToolbar>\r\n\r\n                                                <FlexboxGrid className='col-space' >\r\n                                                    <FlexboxGrid.Item className=\"item text-center\" colspan={24}>\r\n                                                        Donâ€™t have an account?   <Button className='signup-button' appearance=\"link\" style={{ textDecoration: 'none' }}> Sign up</Button>\r\n                                                    </FlexboxGrid.Item>\r\n                                                </FlexboxGrid>\r\n\r\n\r\n                                            </Form.Group>\r\n                                        </Form>\r\n                                    </FlexboxGrid.Item>\r\n                                </FlexboxGrid>\r\n                            </FlexboxGrid>\r\n                        </FlexboxGrid.Item>\r\n                    </FlexboxGrid>\r\n                </div >\r\n            </div >\r\n\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Containerr","// staticClass.js\nimport { Schema } from \"rsuite\";\nimport { salesTypesData, bestSallingProducts } from \"./testData\";\nconst HelperClass = {\n    // Define your static functions as properties\n    loginSchema: () => {\n        return Schema.Model({\n            username: Schema.Types.StringType().isRequired('This field is required.'),\n            password: Schema.Types.StringType().minLength(6, \"Can't be less than 6 characters\")\n                .maxLength(30, 'Cannot be greater than 30 characters')\n                .isRequired('This field required')\n        });\n    },\n    salesTypes: () => {\n        let offLineSale = [];\n        let onLineSale = [];\n        let salesTime = [];\n        salesTypesData.forEach((item) => {\n            offLineSale.push(item.OnlineSales);\n            onLineSale.push(item.OfflineSales)\n            salesTime.push(item.Month)\n        })\n\n        return {\n            offLineSale,\n            onLineSale,\n            salesTime\n        }\n    },\n\n    bestSalesProducts: () => {\n        let products = [];\n        let sales = [];\n\n        bestSallingProducts.forEach((item) => {\n            products.push(item.Product);\n            sales.push(item.Sales)\n\n        })\n\n        return {\n            products,\n            sales\n        }\n    },\n\n    generateFakeOrders: (count) => {\n        const orders = [];\n        const orderStatuses = ['Pending', 'Processing', 'Shipped', 'Delivered', 'Cancelled'];\n\n        for (let i = 1; i <= count; i++) {\n            const order = {\n                OrderID: i,\n                CustomerName: `Customer ${i}`,\n                OrderDate: new Date(2023, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28)),\n                ShipCity: `City ${Math.floor(Math.random() * 10)}`,\n                Total: Math.floor(Math.random() * 1000) + 100,\n                OrderStatus: orderStatuses[Math.floor(Math.random() * orderStatuses.length)], // Random order status\n            };\n            orders.push(order);\n        }\n        return orders;\n    },\n\n    timeAggregation: (data, type) => {\n\n\n\n        if (type === 'y') {\n\n            const aggregatedDataYearly = data.reduce((result, item) => {\n                const timestamp = new Date(item.date);\n                const yearKey = timestamp.getFullYear().toString();\n\n                if (!result[yearKey]) {\n                    result[yearKey] = {\n                        revenue: 0,\n                        inventory: 0,\n                        orders: 0,\n                    };\n                }\n\n                result[yearKey].revenue += item.revenue;\n                result[yearKey].inventory += item.inventory;\n                result[yearKey].orders += item.orders;\n\n                return result;\n            }, {});\n\n            return aggregatedDataYearly;\n        } else if (type === 'w') {\n\n            const aggregatedDataWeekly = data.reduce((result, item) => {\n                const timestamp = new Date(item.date);\n                const weekOfYear = getWeekOfYear(timestamp);\n\n                console.log(weekOfYear, 'weekOfYear')\n                if (!result[weekOfYear]) {\n                    result[weekOfYear] = {\n                        revenue: 0,\n                        inventory: 0,\n                        orders: 0,\n                    };\n                }\n\n                result[weekOfYear].revenue += item.revenue;\n                result[weekOfYear].inventory += item.inventory;\n                result[weekOfYear].orders += item.orders;\n\n                return result;\n            }, {});\n\n            // Helper function to calculate the week of the year\n            function getWeekOfYear(date) {\n                const startOfYear = new Date(date.getFullYear(), 0, 1);\n                const days = Math.floor((date - startOfYear) / (24 * 60 * 60 * 1000));\n                return Math.ceil((days + startOfYear.getDay() + 1) / 7);\n            }\n            return aggregatedDataWeekly\n        } else if (type === 'm') {\n            const aggregatedDataMonthly = data.reduce((result, item) => {\n                const timestamp = new Date(item.date);\n                const yearMonthKey = `${timestamp.getFullYear()}-${(timestamp.getMonth() + 1)\n                    .toString()\n                    .padStart(2, '0')}`;\n\n                if (!result[yearMonthKey]) {\n                    result[yearMonthKey] = {\n                        revenue: 0,\n                        inventory: 0,\n                        orders: 0,\n                    };\n                }\n\n                result[yearMonthKey].revenue += item.revenue;\n                result[yearMonthKey].inventory += item.inventory;\n                result[yearMonthKey].orders += item.orders;\n\n                return result;\n            }, {});\n\n\n\n            return aggregatedDataMonthly;\n        }\n\n\n    }\n\n\n\n\n};\n\n// Export the object\nexport default HelperClass;\n"],"names":["_useState","useState","_useState2","_slicedToArray","userName","setUserName","_useState3","_useState4","password","setPassword","navigate","useNavigate","toaster","useToaster","useLayoutEffect","localStorage","getItem","_jsx","_Fragment","children","className","_jsxs","FlexboxGrid","Item","colspan","src","BgImg","alt","style","marginLeft","color","marginTop","textAlign","justify","Form","model","HelperClass","loginSchema","onSubmit","e","setItem","Math","random","push","Message","showIcon","type","closable","placement","duration","Group","Control","name","onChange","placeholder","autoComplete","ButtonToolbar","IconButton","icon","TiArrowRightOutline","circle","Button","appearance","textDecoration","Schema","Model","username","Types","StringType","isRequired","minLength","maxLength","salesTypes","offLineSale","onLineSale","salesTime","salesTypesData","forEach","item","OnlineSales","OfflineSales","Month","bestSalesProducts","products","sales","bestSallingProducts","Product","Sales","generateFakeOrders","count","orders","orderStatuses","i","order","OrderID","CustomerName","concat","OrderDate","Date","floor","ShipCity","Total","OrderStatus","length","timeAggregation","data","reduce","result","yearKey","date","getFullYear","toString","revenue","inventory","weekOfYear","startOfYear","days","ceil","getDay","getWeekOfYear","console","log","timestamp","yearMonthKey","getMonth","padStart"],"sourceRoot":""}